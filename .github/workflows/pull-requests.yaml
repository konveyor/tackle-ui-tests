name: Pull request test
on:
  push:
    branches:
    - test_prt

jobs:
  k8s-tests:
    name: Collect test cases
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.event.outputs.tests }}
    steps:
      - name: Checkout to pull request branch
        uses: actions/checkout@v2
      - id: file_changes
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'
        # Create event to generate ouput of comma separated test files only
      - id: event
        run: |
          test_files=`python3 -c crud.test.ts"

  k8s:
    name: Run collected tests
    needs: k8s-tests
    if: ${{ needs.k8s-tests.outputs.tests }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tackle
        uses: actions/checkout@v2
        with:
          repository: konveyor/tackle
          path: tackle
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.1
        with:
          minikube version: v1.22.0
          kubernetes version: v1.21.4
          start args: "--addons=registry --addons=ingress"
      - name: Validate Minikube
        run: minikube status | grep Running
      - name: Validate Cluster
        run: kubectl get nodes
      - name: Validate enabled addon in arg
        run: minikube addons list -o json | jq '.registry.Status' | grep enabled
      - name: Kubectl enable addons
        run: minikube addons enable dashboard
      - name: Kubectl enable ingress
        run: minikube addons enable ingress
      - name: Kubectl enable olm
        run: minikube addons enable olm

      - name: Deploy CRD
        run: kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/crds.yaml
      - name: Deploy OLM
        run: kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/olm.yaml
      - name: Deploy k8s
        run: kubectl apply -f https://raw.githubusercontent.com/konveyor/tackle2-operator/main/tackle-k8s.yaml 

      - name: Create CRD
        run: kubectl apply -f https://raw.githubusercontent.com/konveyor/tackle-ui-tests/be906b1fdbc1025c5419a7b34bedddd67fa955ef/.github/crd.yml

      - name: Check pod status
        run: kubectl get pods -n konveyor-tackle

      - name: Verify hub
        run: kubectl wait deployment/tackle-hub --for condition=available --timeout=-1s -n konveyor-tackle
      - name: Verify keycloack-controls
        run: kubectl wait deployment/tackle-keycloak-postgresql --for condition=available --timeout=-1s -n konveyor-tackle
      - name: Verify tackle-keycloack-sso
        run: kubectl wait deployment/tackle-keycloak-sso --for condition=available --timeout=-1s -n konveyor-tackle
      - name: Verify tackle-operator
        run: kubectl wait deployment/tackle-operator --for condition=available --timeout=-1s -n konveyor-tackle
      - name: Verify pathfinder
        run: kubectl wait deployment/tackle-pathfinder --for condition=available --timeout=-1s -n konveyor-tackle
      - name: Verify tackle-pathfinder-postgresql
        run: kubectl wait deployment/tackle-pathfinder-postgresql --for condition=available --timeout=-1s -n konveyor-tackle
      - name: Verify tackle-ui
        run: kubectl wait deployment/tackle-ui --for condition=available --timeout=-1s -n konveyor-tackle

      - name: Wait for Ingress
        run: |
          bash -c 'external_ip="";
          while [ -z $external_ip ];
            do echo "Waiting for end point...";
            external_ip=$(kubectl get ingress tackle --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}" -n konveyor-tackle);[ -z "$external_ip" ] &&
            sleep 10;
          done;
          echo "End point ready:" &&
          echo $external_ip;
          export endpoint=$external_ip;
          echo "CYPRESS_tackleUrl=https://$external_ip" >>$GITHUB_ENV'

      - name: Checkout to pull request branch
        uses: actions/checkout@v2
       # Install NPM dependencies
      - name: Install NPM
        run: npm install .
      - name: Run cypress test cases
        run: npx cypress run --spec ${{ needs.k8s-tests.outputs.tests }} --env user="admin",pass="password",tackleUrl=${{ env.CYPRESS_tackleUrl }}
