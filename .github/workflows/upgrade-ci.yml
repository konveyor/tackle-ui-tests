name: Upgrade CI test

on:
  # pull_request:
  #   branches:
  #     - main 
  push:          # Runs on any direct push to any branch 


jobs:
  k8s:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tackle
        uses: actions/checkout@v2 
        with:
          repository: konveyor/tackle
          path: tackle

      - name: Checkout to branch
        uses: actions/checkout@v4

      - name: Get Initial Branch Name
        run: echo "INIT_BRANCH=$(git symbolic-ref --short HEAD)" >> $GITHUB_ENV

      - name: Install operator-sdk
        shell: bash
        run: |
          if command -v operator-sdk >/dev/null 2>&1; then
            echo "operator-sdk is already installed...yay"
            exit 0
          fi
          curl -LO https://github.com/operator-framework/operator-sdk/releases/download/v1.35.0/operator-sdk_linux_amd64
          sudo install -o root -g root -m 0755 operator-sdk_linux_amd64 /usr/local/bin/operator-sdk

      - name: Install kubectl
        shell: bash
        run: |
          if command -v kubectl >/dev/null 2>&1; then
            echo "kubectl is already installed...yay"
            exit 0
          fi
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - name: Installing oc binary
        shell: bash
        run: |
          if command -v oc >/dev/null 2>&1; then
            echo "oc is already installed...yay"
            exit 0
          fi
          OC_VERSION=$(curl -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/release.txt | grep 'Name:' | awk '{print $2}')
          curl -LO "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OC_VERSION}/openshift-client-linux.tar.gz"
          tar -xzf openshift-client-linux.tar.gz oc
          sudo mv oc /usr/local/bin/oc
          oc version --client

      - name: Install opm cli
        shell: bash
        run: |
          if command -v opm >/dev/null 2>&1; then
            echo "opm is already installed"
            exit 0
          fi
          export OPM_VERSION=$(curl -s https://api.github.com/repos/operator-framework/operator-registry/releases/latest | grep tag_name | cut -d '"' -f 4)

          # Download the binary
          curl -Lo opm-linux-amd64 "https://github.com/operator-framework/operator-registry/releases/download/${OPM_VERSION}/linux-amd64-opm"
          chmod +x opm-linux-amd64
          sudo mv opm-linux-amd64 /usr/local/bin/opm
          opm version

      - name: Set Environment Variables
        run: |
          echo "QUAY_USERNAME=${{ secrets.QUAY_USERNAME }}" >> $GITHUB_ENV
          echo "QUAY_PASSWORD=${{ secrets.QUAY_PASSWORD }}" >> $GITHUB_ENV

      - name: Create and push index image to quay
        run: bash hack/create-index-image.sh 

      - name: Setup minikube
        uses: konveyor/tackle2-operator/.github/actions/start-minikube@main
        with:
          memory: 'max'
          cpus: 'max'

      - name: Enable olm 
        run: minikube addons enable olm

      - name: Enable ingress addon
        run : minikube addons enable ingress

      - name: Install Pre Upgrade konveyor
        run: bash hack/install-preupgrade-konveyor.sh 

      - name: Set preupgrade konveyor value
        run: | 
          konveyor_version=$(kubectl get csv -n konveyor-tackle -o=custom-columns=:spec.version | head -n 2 | tr -d '[:space:]')
          echo "cypress_mtaVersion=$konveyor_version" >> $GITHUB_ENV
          echo "Konveyor version: $konveyor_version"

      - name: Display konveyor version for confirmation
        run: |
          echo "Confirming konveyor version from environment variable: $cypress_mtaVersion"
          echo "Environment variable cypress_mtaVersion value: ${{ env.cypress_mtaVersion }}"

      - name: Use mtaVersion
        run: echo "Konveyor version is $cypress_mtaVersion"

      

      - name: Check pod status
        run: kubectl get pods -n konveyor-tackle

      - name: Wait for Ingress
        shell: bash
        run: |
          bash -c 'external_ip="";
          echo $external_ip;
          while [[ -z $external_ip ]] 
            do 
              echo "Waiting for end point..."
                external_ip=$(kubectl get ingress tackle --template="{{range.status.loadBalancer.ingress}}{{.ip}}{{end}}" -n konveyor-tackle);[[ -z $external_ip ]] &&
                echo $external_ip;
                sleep 10;
            done
          echo "End point ready:" &&
          echo $external_ip;
          export endpoint=$(minikube ip);
          echo "CYPRESS_tackleUrl=https://$endpoint" >>$GITHUB_ENV'
          git branch

      - name: Checkout to release-0.6 branch
        uses: actions/checkout@v4
        with:
          ref: release-0.6

      - name: Install NPM
        run: npm install .

      - name: Set Keycloak admin password and git credentials
        run: |
          keycloak_password=$(kubectl get secret tackle-keycloak-sso -n konveyor-tackle -o=jsonpath='{.data.admin-password}' | base64 -d)
          echo "cypress_keycloakAdminPassword=$keycloak_password" >> $GITHUB_ENV
          
      - name: Run cypress login test
        run: npx cypress run --spec "cypress/e2e/tests/login.test.ts" --env user="admin",pass="password",tackleUrl=${{ env.CYPRESS_tackleUrl }}
      
      - name: Run Preupgrade test cases
        run: |
          CYPRESS_INCLUDE_TAGS=@pre-upgrade npx cypress run --spec cypress/e2e/tests/upgrade/create_upgrade_data.test.ts --env user=admin,pass=Dog8code,tackleUrl=${{ env.CYPRESS_tackleUrl }},git_user=${{ secrets.KONVEYOR_GIT_USER }},git_password=${{ secrets.KONVEYOR_GIT_PASSWORD }}

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: minikube-tests-screenshots
          path: /home/runner/work/tackle-ui-tests/tackle-ui-tests/cypress/screenshots/

      - name: Checkout to initial branch
        run: git checkout $INIT_BRANCH

      
      - name: Install Post Upgrade konveyor
        run: git branch && bash hack/install-postupgrade-konveyor.sh 
      

      - name: Install NPM
        run: npm install .


      - name: Set postupgrade konveyor value
        run: | 
          konveyor_version=$(kubectl get csv -n konveyor-tackle -o=custom-columns=:spec.version | head -n 2 | tr -d '[:space:]')
          echo "cypress_mtaVersion=$konveyor_version" >> $GITHUB_ENV

      - name: Set Keycloak admin password and git credentials (post-upgrade)
        run: |
          keycloak_password=$(kubectl get secret tackle-keycloak-sso -n konveyor-tackle -o=jsonpath='{.data.admin-password}' | base64 -d)
          echo "cypress_keycloakAdminPassword=$keycloak_password" >> $GITHUB_ENV

      - name: Use mtaVersion
        run: echo "Konveyor version is $cypress_mtaVersion"

        
      - name: Run cypress login test
        run: npx cypress run --spec "cypress/e2e/tests/login.test.ts" --env user="admin",pass="Dog8code",tackleUrl=${{ env.CYPRESS_tackleUrl }}

      - name: Run Post upgrade test cases
        run: |
          CYPRESS_INCLUDE_TAGS=@post-upgrade npx cypress run --spec cypress/e2e/tests/upgrade/after_upgrade.test.ts  --config baseUrl=${{ env.CYPRESS_tackleUrl }} --env user=admin,pass=Dog8code,tackleUrl=${{ env.CYPRESS_tackleUrl }},git_user=${{ secrets.KONVEYOR_GIT_USER }},git_password=${{ secrets.KONVEYOR_GIT_PASSWORD }}

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: minikube-tests-screenshots
          path: /home/runner/work/tackle-ui-tests/tackle-ui-tests/cypress/screenshots/

          